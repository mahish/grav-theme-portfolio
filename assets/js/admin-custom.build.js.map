{"version":3,"file":"admin-custom.build.js","sources":["../../src/js/admin-custom.js"],"sourcesContent":["const domLoad = () => {\n  console.log('custom admin loaded');\n\n  const selectors = {\n    refererPrefix: 'field-selection__',\n    repeater: '.field-selection',\n    repeaterItem: '[data-collection-item]',\n    select: '.field-selection__select', // hidden <select>\n    field: '.form-fieldset',\n    addItem: '[data-action=\"add\"]',\n  };\n\n  const $repeaters = document.querySelectorAll(selectors.repeater);\n  if (!$repeaters.length) return;\n\n  function clearData() {} // might not be needed since there is information in .md which item is selected\n\n  function resetVisibility($repeaterItem) {\n    $repeaterItem.querySelectorAll(selectors.field).forEach($field => $field.classList.remove('field-selection--show'))\n  }\n\n  function showHide($repeaterItem, $select) {\n    resetVisibility($repeaterItem);\n\n    const selectValue = $select.value;\n\n    // Exeption - default selected\n    if (selectValue === 'default') return;\n\n    // const $selectParent = $select.closest('.form-field');\n    const referer = selectors.refererPrefix + selectValue;\n    const $selectedFields = $repeaterItem.querySelector(`input[type=\"hidden\"][value=\"${referer}\"]`);\n    const $fieldToShow = $selectedFields.closest(selectors.field);\n\n    // show the selected field\n    $fieldToShow.classList.add('field-selection--show');\n  }\n\n  function checkTarget(event) {\n    const $selected = event.target;\n    if (!$selected.classList.contains('field-selection__select')) return;\n\n    const $repeaterItem = $selected.closest(selectors.repeaterItem);\n    const nodeName = $selected.nodeName.toLowerCase();\n\n    if (nodeName === 'input' || nodeName === 'select') {\n      showHide($repeaterItem, $selected)\n    }\n  }\n\n  $repeaters.forEach($repeater => {\n    // // place \".collection-actions\" buttons on top\n    // if ($repeater.classList.contains('is-reverse')) {\n    //   $repeater.parentElement.classList.add('is-reverse');\n    // }\n\n    // adjust existing selections on load\n    const $repeaterItems = $repeater.children; // live collection\n    Array.from($repeaterItems).forEach($repeaterItem => {\n      showHide($repeaterItem, $repeaterItem.querySelector(`${selectors.select}[checked]`));\n    });\n\n    // dynamic on user input\n    $repeater.addEventListener('change', checkTarget);\n  });\n}\n\n//  DOMContentLoaded event fires when parsing of  current page is complete. DOMContentLoaded is a great event to use to hookup UI functionality to complex web pages.\ndocument.addEventListener('DOMContentLoaded', domLoad, false);\n"],"names":["document","addEventListener","console","log","selectors","$repeaters","querySelectorAll","showHide","$repeaterItem","$select","forEach","$field","classList","remove","resetVisibility","selectValue","value","referer","querySelector","closest","add","checkTarget","event","$selected","target","contains","nodeName","toLowerCase","length","$repeater","$repeaterItems","children","Array","from"],"mappings":"yBAoEAA,SAASC,iBAAiB,oBApEV,WACdC,QAAQC,IAAI,2BAENC,EACW,oBADXA,EAEM,mBAFNA,EAGU,yBAHVA,EAII,2BAJJA,EAKG,iBAIHC,EAAaL,SAASM,iBAAiBF,YASpCG,EAASC,EAAeC,aAJRD,GACvBA,EAAcF,iBAAiBF,GAAiBM,SAAQ,SAAAC,UAAUA,EAAOC,UAAUC,OAAO,4BAI1FC,CAAgBN,OAEVO,EAAcN,EAAQO,SAGR,YAAhBD,OAGEE,EAAUb,EAA0BW,EAClBP,EAAcU,oDAA6CD,SAC9CE,QAAQf,GAGhCQ,UAAUQ,IAAI,mCAGpBC,EAAYC,OACbC,EAAYD,EAAME,UACnBD,EAAUX,UAAUa,SAAS,gCAE5BjB,EAAgBe,EAAUJ,QAAQf,GAClCsB,EAAWH,EAAUG,SAASC,cAEnB,UAAbD,GAAqC,WAAbA,GAC1BnB,EAASC,EAAee,IAjCvBlB,EAAWuB,QAqChBvB,EAAWK,SAAQ,SAAAmB,OAOXC,EAAiBD,EAAUE,SACjCC,MAAMC,KAAKH,GAAgBpB,SAAQ,SAAAF,GACjCD,EAASC,EAAeA,EAAcU,wBAAiBd,oBAIzDyB,EAAU5B,iBAAiB,SAAUoB,SAKc"}